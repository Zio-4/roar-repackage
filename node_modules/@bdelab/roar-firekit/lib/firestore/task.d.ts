import { CollectionReference, DocumentReference } from 'firebase/firestore';
/** Tasks may be decomposed into blocks of trials */
export interface Block {
    blockNumber: number;
    trialMethod: string;
    corpus: string;
}
export interface TaskVariantInput {
    taskId: string;
    taskName: string;
    variantName: string;
    taskDescription?: string | null;
    variantDescription?: string | null;
    blocks?: Block[];
}
/** Class representing a ROAR task
 * @param {string} taskId - The ID of the parent task. Should be a short initialism, e.g. "swr" or "srf"
 * @param {string} taskName - The name of the parent task
 * @param {string} taskDescription - The description of the task
 * @param {string} variantName - The name of the task variant
 * @param {string} variantDescription - The description of the variant
 * @param {Array} blocks - The blocks of this task variant
 */
export declare class RoarTaskVariant {
    taskId: string;
    taskName: string;
    taskDescription: string | null;
    taskRef: DocumentReference | undefined;
    variantId: string | undefined;
    variantName: string;
    variantDescription: string | null;
    variantRef: DocumentReference | undefined;
    variantsCollectionRef: CollectionReference | undefined;
    blocks: Block[];
    constructor({ taskId, taskName, variantName, taskDescription, variantDescription, blocks, }: TaskVariantInput);
    /** Set Firestore doc and collection references
     * @param {DocumentReference} rootDoc - The root document reference
     */
    setRefs(rootDoc: DocumentReference): void;
    /** Add a block to this experiment
     * @method
     * @param {number} blockNumber - The block index
     * @param {string} trialMethod - The trial sampling method
     * @param {string} corpus - The corpus from which stimuli are drawn
     */
    addBlock({ blockNumber, trialMethod, corpus }: Block): void;
    /**
     * Push the trial and trial variant to Firestore
     * @method
     * @async
     */
    toFirestore(): Promise<void>;
}
