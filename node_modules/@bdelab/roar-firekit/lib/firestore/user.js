"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoarUser = void 0;
var firestore_1 = require("firebase/firestore");
var util_1 = require("./util");
/** Class representing a ROAR user */
var RoarUser = /** @class */ (function () {
    function RoarUser(_a) {
        var id = _a.id, firebaseUid = _a.firebaseUid, _b = _a.birthMonth, birthMonth = _b === void 0 ? null : _b, _c = _a.birthYear, birthYear = _c === void 0 ? null : _c, _d = _a.classId, classId = _d === void 0 ? null : _d, _e = _a.schoolId, schoolId = _e === void 0 ? null : _e, _f = _a.districtId, districtId = _f === void 0 ? null : _f, _g = _a.studyId, studyId = _g === void 0 ? null : _g, _h = _a.userCategory, userCategory = _h === void 0 ? 'student' : _h, _j = _a.userMetadata, userMetadata = _j === void 0 ? {} : _j;
        var allowedUserCategories = ['student', 'educator', 'researcher'];
        if (!allowedUserCategories.includes(userCategory)) {
            throw new Error("User category must be one of ".concat(allowedUserCategories.join(', '), "."));
        }
        this.id = id;
        this.firebaseUid = firebaseUid;
        this.birthMonth = birthMonth;
        this.birthYear = birthYear;
        this.classId = classId;
        this.schoolId = schoolId;
        this.districtId = districtId;
        this.studyId = studyId;
        this.userCategory = userCategory;
        this.userMetadata = userMetadata;
        this.userRef = undefined;
        this.isPushedToFirestore = false;
    }
    /** Set Firestore doc references
     * @param {DocumentReference} rootDoc - The root document reference
     */
    RoarUser.prototype.setRefs = function (rootDoc) {
        this.userRef = (0, firestore_1.doc)(rootDoc, 'users', this.id);
    };
    /**
     * Push the user to Firestore
     * @method
     * @async
     */
    RoarUser.prototype.toFirestore = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userData_1;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.userRef === undefined) {
                    throw new Error('User refs not set. Please use the setRefs method first.');
                }
                else {
                    userData_1 = {
                        id: this.id,
                        firebaseUid: this.firebaseUid,
                        birthMonth: this.birthMonth,
                        birthYear: this.birthYear,
                        classId: this.classId,
                        schoolId: this.schoolId,
                        districtId: this.districtId,
                        studyId: this.studyId,
                        userCategory: this.userCategory,
                        lastUpdated: (0, firestore_1.serverTimestamp)(),
                    };
                    // If the study, district, school, or class is provided, also add it to the
                    // list of all studies, districts, schools, or classes.
                    // Likewise for task and variant.
                    if (this.studyId)
                        userData_1.studies = (0, firestore_1.arrayUnion)(this.studyId);
                    if (this.districtId)
                        userData_1.districts = (0, firestore_1.arrayUnion)(this.districtId);
                    if (this.schoolId)
                        userData_1.schools = (0, firestore_1.arrayUnion)(this.schoolId);
                    if (this.classId)
                        userData_1.classes = (0, firestore_1.arrayUnion)(this.classId);
                    return [2 /*return*/, (0, firestore_1.updateDoc)(this.userRef, (0, util_1.removeNull)(userData_1))
                            .catch(function (error) {
                            var errorCode = error.code;
                            if (errorCode === 'permission-denied') {
                                // The ROAR Firestore rules are written such that if we get here, the
                                // user does not currently exist in Firestore. So create them.
                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                return (0, firestore_1.setDoc)(_this.userRef, __assign(__assign(__assign({}, userData_1), _this.userMetadata), { createdAt: (0, firestore_1.serverTimestamp)() }));
                            }
                            else {
                                throw error;
                            }
                        })
                            .then(function () {
                            _this.isPushedToFirestore = true;
                        })];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Update the user's "lastUpdated" timestamp
     * @method
     * @async
     */
    RoarUser.prototype.updateFirestoreTimestamp = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.userRef === undefined) {
                    throw new Error('User refs not set. Please use the setRefs method first.');
                }
                else {
                    (0, firestore_1.updateDoc)(this.userRef, {
                        lastUpdated: (0, firestore_1.serverTimestamp)(),
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    return RoarUser;
}());
exports.RoarUser = RoarUser;
