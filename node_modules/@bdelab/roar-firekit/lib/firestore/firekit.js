"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoarFirekit = void 0;
var user_1 = require("./user");
var task_1 = require("./task");
var run_1 = require("./run");
var auth_1 = require("../auth");
var app_1 = require("firebase/app");
var firestore_1 = require("firebase/firestore");
/**
 * The RoarFirekit class is the main entry point for the ROAR Firestore API.
 * It represents multiple linked Firestore documents and provides methods
 * for interacting with them.
 */
var RoarFirekit = /** @class */ (function () {
    /**
     * Create a RoarFirekit. This expects an object with keys `userInfo`,
     * `taskInfo`, and `confg` where `userInfo` is a [[UserData]] object,
     * `taskInfo` is a [[TaskVariantInput]] object and `config` is a
     * [[ConfigData]] object.
     * @param {{userInfo: UserData, taskInfo: TaskVariantInput, config: ConfigData}=} destructuredParam
     *     userInfo: The user input object
     *     taskInfo: The task input object
     *     config: Firebase configuration object
     */
    function RoarFirekit(_a) {
        var userInfo = _a.userInfo, taskInfo = _a.taskInfo, config = _a.config;
        this.userInfo = userInfo;
        this.taskInfo = taskInfo;
        this.user = undefined;
        this.task = undefined;
        this.run = undefined;
        var firebaseApp = (0, app_1.initializeApp)(config.firebaseConfig);
        var db = (0, firestore_1.getFirestore)(firebaseApp);
        (0, firestore_1.enableIndexedDbPersistence)(db).catch(function (err) {
            if (err.code == 'failed-precondition') {
                console.log("Couldn't enable indexed db persistence. This is probably because the browser has multiple roar tabs open.");
                // Multiple tabs open, persistence can only be enabled
                // in one tab at a a time.
                // ...
            }
            else if (err.code == 'unimplemented') {
                console.log("Couldn't enable indexed db persistence. This is probably because the browser doesn't support it.");
                // The current browser does not support all of the
                // features required to enable persistence
                // ...
            }
        });
        // Subsequent queries will use persistence, if it was enabled successfully
        this.rootDoc = firestore_1.doc.apply(void 0, __spreadArray([(0, firestore_1.collection)(db, config.rootDoc[0])], config.rootDoc.slice(1), false));
    }
    /**
     * Start the ROAR run. Push the task, user, and run info to Firestore
     * Call this method before starting the jsPsych experiment.
     * @method
     * @async
     */
    RoarFirekit.prototype.startRun = function () {
        return __awaiter(this, void 0, void 0, function () {
            var auth;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, auth_1.firebaseSignIn)(this.userInfo.id)];
                    case 1:
                        auth = _a.sent();
                        this.user = new user_1.RoarUser(__assign(__assign({}, this.userInfo), { 
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            firebaseUid: auth.currentUser.uid }));
                        this.user.setRefs(this.rootDoc);
                        this.task = new task_1.RoarTaskVariant(this.taskInfo);
                        this.task.setRefs(this.rootDoc);
                        this.run = new run_1.RoarRun({ user: this.user, task: this.task });
                        return [2 /*return*/, (this.task
                                .toFirestore()
                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                .then(function () { return _this.user.toFirestore(); })
                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                .then(function () { return _this.run.startRun(); }))];
                }
            });
        });
    };
    /**
     * Finish the ROAR run by marking it as finished in Firestore.
     * Call this method after the jsPsych experiment finishes. For example:
     *
     * ```javascript
     * jsPsych.init({
     *   timeline: exp,
     *   on_finish: function(data) {
     *     firekit.finishRun();
     *   }
     * });
     * ```
     * @method
     * @async
     */
    RoarFirekit.prototype.finishRun = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.run) {
                    return [2 /*return*/, this.run.finishRun().then(function () { return (0, auth_1.firebaseSignOut)(); })];
                }
                else {
                    throw new Error('Run is undefined. Use the startRun method first.');
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Add new trial data to this run on Firestore.
     *
     * This method can be added to individual jsPsych trials by calling it from
     * the `on_finish` function, like so:
     *
     * ```javascript
     * var trial = {
     *   type: 'image-keyboard-response',
     *   stimulus: 'imgA.png',
     *   on_finish: function(data) {
     *     firekit.addTrialData(data);
     *   }
     * };
     * ```
     *
     * Or you can call it from all trials in a jsPsych
     * timeline by calling it from the `on_data_update` callback. In the latter
     * case, you can avoid saving extraneous trials by conditionally calling
     * this method based on the data. For example:
     *
     * ```javascript
     * const timeline = [
     *   // A fixation trial; don't save to Firestore
     *   {
     *     type: htmlKeyboardResponse,
     *     stimulus: '<div style="font-size:60px;">+</div>',
     *     choices: "NO_KEYS",
     *     trial_duration: 500,
     *   },
     *   // A stimulus and response trial; save to Firestore
     *   {
     *     type: imageKeyboardResponse,
     *     stimulus: 'imgA.png',
     *     data: { saveToFirestore: true },
     *   }
     * ]
     * jsPsych.init({
     *   timeline: timeline,
     *   on_data_update: function(data) {
     *     if (data.saveToFirestore) {
     *       firekit.addTrialData(data);
     *     }
     *   }
     * });
     * ```
     *
     * @method
     * @async
     * @param {*} trialData - An object containing trial data.
     */
    RoarFirekit.prototype.writeTrial = function (trialData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.run) {
                    return [2 /*return*/, this.run.writeTrial(trialData)];
                }
                else {
                    throw new Error('Run is undefined. Use the startRun method first.');
                }
                return [2 /*return*/];
            });
        });
    };
    return RoarFirekit;
}());
exports.RoarFirekit = RoarFirekit;
