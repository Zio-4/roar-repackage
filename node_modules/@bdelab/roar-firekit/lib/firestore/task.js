"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoarTaskVariant = void 0;
var firestore_1 = require("firebase/firestore");
var util_1 = require("./util");
/** Class representing a ROAR task
 * @param {string} taskId - The ID of the parent task. Should be a short initialism, e.g. "swr" or "srf"
 * @param {string} taskName - The name of the parent task
 * @param {string} taskDescription - The description of the task
 * @param {string} variantName - The name of the task variant
 * @param {string} variantDescription - The description of the variant
 * @param {Array} blocks - The blocks of this task variant
 */
var RoarTaskVariant = /** @class */ (function () {
    function RoarTaskVariant(_a) {
        var taskId = _a.taskId, taskName = _a.taskName, variantName = _a.variantName, _b = _a.taskDescription, taskDescription = _b === void 0 ? null : _b, _c = _a.variantDescription, variantDescription = _c === void 0 ? null : _c, _d = _a.blocks, blocks = _d === void 0 ? [] : _d;
        this.taskId = taskId;
        this.taskName = taskName;
        this.taskDescription = taskDescription;
        this.variantName = variantName;
        this.variantDescription = variantDescription;
        this.blocks = blocks;
        this.taskRef = undefined;
        this.variantsCollectionRef = undefined;
        this.variantId = undefined;
        this.variantRef = undefined;
    }
    /** Set Firestore doc and collection references
     * @param {DocumentReference} rootDoc - The root document reference
     */
    RoarTaskVariant.prototype.setRefs = function (rootDoc) {
        this.taskRef = (0, firestore_1.doc)(rootDoc, 'tasks', this.taskId);
        this.variantsCollectionRef = (0, firestore_1.collection)(this.taskRef, 'variants');
    };
    /** Add a block to this experiment
     * @method
     * @param {number} blockNumber - The block index
     * @param {string} trialMethod - The trial sampling method
     * @param {string} corpus - The corpus from which stimuli are drawn
     */
    RoarTaskVariant.prototype.addBlock = function (_a) {
        var _b = _a.blockNumber, blockNumber = _b === void 0 ? 0 : _b, _c = _a.trialMethod, trialMethod = _c === void 0 ? 'practice' : _c, _d = _a.corpus, corpus = _d === void 0 ? 'practiceCorpusId' : _d;
        this.blocks.push({
            blockNumber: blockNumber,
            trialMethod: trialMethod,
            corpus: corpus,
        });
    };
    /**
     * Push the trial and trial variant to Firestore
     * @method
     * @async
     */
    RoarTaskVariant.prototype.toFirestore = function () {
        return __awaiter(this, void 0, void 0, function () {
            var taskData, emptyVariantRef, q, querySnapshot, variantData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.taskRef === undefined || this.variantsCollectionRef === undefined)) return [3 /*break*/, 1];
                        throw new Error('Task refs not set. Please use the setRefs method first.');
                    case 1:
                        taskData = {
                            id: this.taskId,
                            name: this.taskName,
                            description: this.taskDescription,
                            lastUpdated: (0, firestore_1.serverTimestamp)(),
                        };
                        return [4 /*yield*/, (0, firestore_1.setDoc)(this.taskRef, taskData)];
                    case 2:
                        _a.sent();
                        emptyVariantRef = (0, firestore_1.doc)(this.taskRef, 'variants', 'empty');
                        return [4 /*yield*/, (0, firestore_1.setDoc)(emptyVariantRef, {
                                name: 'empty',
                                blocksString: 'empty',
                            })];
                    case 3:
                        _a.sent();
                        q = (0, firestore_1.query)(this.variantsCollectionRef, (0, firestore_1.where)('name', '==', this.variantName), (0, firestore_1.where)('blocksString', '==', JSON.stringify(this.blocks)), (0, firestore_1.orderBy)('lastPlayed', 'desc'), (0, firestore_1.limit)(1));
                        return [4 /*yield*/, (0, firestore_1.getDocs)(q)];
                    case 4:
                        querySnapshot = _a.sent();
                        // If so use the Firestore generated id for the variant and update timestamp.
                        querySnapshot.forEach(function (docRef) {
                            _this.variantId = docRef.id;
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            _this.variantRef = (0, firestore_1.doc)(_this.variantsCollectionRef, _this.variantId);
                            (0, firestore_1.updateDoc)(_this.variantRef, (0, util_1.removeNull)({
                                description: _this.variantDescription,
                                lastPlayed: (0, firestore_1.serverTimestamp)(),
                            }));
                        });
                        if (!(this.variantId === undefined)) return [3 /*break*/, 6];
                        variantData = {
                            name: this.variantName,
                            description: this.variantDescription,
                            blocks: this.blocks,
                            blocksString: JSON.stringify(this.blocks),
                            lastPlayed: (0, firestore_1.serverTimestamp)(),
                        };
                        this.variantRef = (0, firestore_1.doc)(this.variantsCollectionRef);
                        return [4 /*yield*/, (0, firestore_1.setDoc)(this.variantRef, variantData)];
                    case 5:
                        _a.sent();
                        this.variantId = this.variantRef.id;
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return RoarTaskVariant;
}());
exports.RoarTaskVariant = RoarTaskVariant;
