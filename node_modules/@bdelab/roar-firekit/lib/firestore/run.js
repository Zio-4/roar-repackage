"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoarRun = exports.convertTrialToFirestore = void 0;
var firestore_1 = require("firebase/firestore");
/**
 * Convert a trial data to allow storage on Cloud Firestore.
 *
 * This function leaves all other trial data intact but converts
 * any URL object to a string.
 *
 * @function
 * @param {Object} trialData - Trial data to convert
 * @returns {Object} Converted trial data
 */
var convertTrialToFirestore = function (trialData) {
    return Object.fromEntries(Object.entries(trialData).map(function (_a) {
        var key = _a[0], value = _a[1];
        if (value instanceof URL) {
            return [key, value.toString()];
        }
        else if (typeof value === 'object' && value !== null) {
            return [key, (0, exports.convertTrialToFirestore)(value)];
        }
        else {
            return [key, value];
        }
    }));
};
exports.convertTrialToFirestore = convertTrialToFirestore;
/**
 * Class representing a ROAR run.
 *
 * A run is a globally unique collection of successive trials that constitute
 * one user "running" through a single task one time.
 */
var RoarRun = /** @class */ (function () {
    /** Create a ROAR run
     * @param {RoarUser} user - The user running the task
     * @param {RoarTaskVariant} task - The task variant being run
     */
    function RoarRun(_a) {
        var user = _a.user, task = _a.task;
        if (!(user.userCategory === 'student')) {
            throw new Error('Only students can start a run.');
        }
        this.user = user;
        this.task = task;
        if (this.user.userRef) {
            this.runRef = (0, firestore_1.doc)((0, firestore_1.collection)(this.user.userRef, 'runs'));
        }
        else {
            throw new Error('User refs not set. Please use the user.setRefs method first.');
        }
        if (!this.task.taskRef) {
            throw new Error('Task refs not set. Please use the task.setRefs method first.');
        }
        this.started = false;
    }
    /**
     * Create a new run on Firestore
     * @method
     * @async
     */
    RoarRun.prototype.startRun = function () {
        return __awaiter(this, void 0, void 0, function () {
            var runData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.user.isPushedToFirestore) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.user.toFirestore()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(this.task.variantRef === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.task.toFirestore()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        runData = {
                            districtId: this.user.districtId,
                            schoolId: this.user.schoolId,
                            classId: this.user.classId,
                            studyId: this.user.studyId,
                            taskId: this.task.taskId,
                            variantId: this.task.variantId,
                            taskRef: this.task.taskRef,
                            variantRef: this.task.variantRef,
                            completed: false,
                            timeStarted: (0, firestore_1.serverTimestamp)(),
                            timeFinished: null,
                        };
                        return [4 /*yield*/, (0, firestore_1.setDoc)(this.runRef, runData)
                                .then(function () {
                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                return (0, firestore_1.updateDoc)(_this.user.userRef, {
                                    tasks: (0, firestore_1.arrayUnion)(_this.task.taskId),
                                    variants: (0, firestore_1.arrayUnion)(_this.task.variantId),
                                    taskRefs: (0, firestore_1.arrayUnion)(_this.task.taskRef),
                                    variantRefs: (0, firestore_1.arrayUnion)(_this.task.variantRef),
                                });
                            })
                                .then(function () { return _this.user.updateFirestoreTimestamp(); })];
                    case 5:
                        _a.sent();
                        this.started = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Mark this run as complete on Firestore
     * @method
     * @async
     */
    RoarRun.prototype.finishRun = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.started) {
                    throw new Error('Run has not been started yet. Use the startRun method first.');
                }
                return [2 /*return*/, (0, firestore_1.updateDoc)(this.runRef, {
                        completed: true,
                        timeFinished: (0, firestore_1.serverTimestamp)(),
                    }).then(function () {
                        return _this.user.updateFirestoreTimestamp();
                    })];
            });
        });
    };
    /**
     * Add a new trial to this run on Firestore
     * @method
     * @async
     * @param {*} trialData - An object containing trial data.
     */
    RoarRun.prototype.writeTrial = function (trialData) {
        return __awaiter(this, void 0, void 0, function () {
            var trialRef;
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.started) {
                    throw new Error('Run has not been started yet. Use the startRun method first.');
                }
                trialRef = (0, firestore_1.doc)((0, firestore_1.collection)(this.runRef, 'trials'));
                return [2 /*return*/, (0, firestore_1.setDoc)(trialRef, (0, exports.convertTrialToFirestore)(trialData)).then(function () {
                        _this.user.updateFirestoreTimestamp();
                    })];
            });
        });
    };
    return RoarRun;
}());
exports.RoarRun = RoarRun;
