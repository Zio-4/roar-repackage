"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.firebaseSignOut = exports.firebaseSignIn = exports.roarPassword = exports.roarEmail = void 0;
var auth_1 = require("firebase/auth");
var uuid_1 = require("uuid");
/**
 * Return a unique, reproducible, and disposable email address for the
 * user.
 *
 * We create an email/password combination for each roar UID. This
 * function uses dispostable.com to create a disposable email address for
 * authentication. On dispostable.com, unread emails are deleted after 2
 * days and read messages are deleted after 2 months. These messages are
 * viewable by anyone who knows the email address, so this email is not
 * intended to receive secure messages.
 *
 * @function
 * @param {string} roarUid - The ROAR user ID
 * @returns {string} - The email address
 */
var roarEmail = function (roarUid) {
    return "".concat(roarUid, "@dispostable.com");
};
exports.roarEmail = roarEmail;
var roarUuidv5Namespace = (0, uuid_1.v5)('https://reading.stanford.edu/', uuid_1.v5.URL);
/**
 * Return a unique and reproducible password for the user.
 *
 * We create an email/password combination for each roar UID. This
 * computed property returns a UUID V5 hash of the roar UID using the ROAR
 * UUID namespace, which itself is a UUID V5 hash of the the
 * https://reading.stanford.edu/ URL using the UUID V5 URL namespace.
 *
 * @function
 * @param {string} roarUid - The ROAR user ID
 * @returns {string} - The password
 */
var roarPassword = function (roarUid) {
    return (0, uuid_1.v5)(roarUid, roarUuidv5Namespace).replace(/-/g, '');
};
exports.roarPassword = roarPassword;
var firebaseSignIn = function (roarUid) { return __awaiter(void 0, void 0, void 0, function () {
    var auth, userCredential;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                auth = (0, auth_1.getAuth)();
                return [4 /*yield*/, (0, auth_1.createUserWithEmailAndPassword)(auth, (0, exports.roarEmail)(roarUid), (0, exports.roarPassword)(roarUid)).catch(function (error) {
                        if (error.code === 'auth/email-already-in-use') {
                            // console.log('Email already in use');
                            return (0, auth_1.signInWithEmailAndPassword)(auth, (0, exports.roarEmail)(roarUid), (0, exports.roarPassword)(roarUid));
                        }
                        else {
                            throw error;
                        }
                    })];
            case 1:
                userCredential = _a.sent();
                // console.log(`Signed in as ${userCredential.user.email}`);
                // console.log(`Firebase UID: ${userCredential.user.uid}`);
                return [2 /*return*/, auth];
        }
    });
}); };
exports.firebaseSignIn = firebaseSignIn;
var firebaseSignOut = function () { return __awaiter(void 0, void 0, void 0, function () {
    var auth;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                auth = (0, auth_1.getAuth)();
                return [4 /*yield*/, (0, auth_1.signOut)(auth)];
            case 1:
                _a.sent();
                return [2 /*return*/, auth];
        }
    });
}); };
exports.firebaseSignOut = firebaseSignOut;
